@using System.Globalization
@using Radzen
@using Radzen.Blazor

<RadzenAccordion>
    <Items>
        <RadzenAccordionItem Text="Graph" Icon="assessment" Selected="true">
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
                <RadzenStack  Orientation="Orientation.Vertical" Gap="4px">
                    <RadzenSelectBar @onclick="() => GetRoomMeasurements(_times[_timesKey])"  @bind-Value="_measurementType" TextProperty="Text" ValueProperty="Value" TValue="@MeasurementType" Data="@(Enum.GetValues<MeasurementType>().Select(t => new { Text = $"{Enum.GetName(t)}", Value = t }))">
                    </RadzenSelectBar>
                </RadzenStack>
                <RadzenStack  Orientation="Orientation.Vertical" Gap="4px">
                    <RadzenSelectBar @onclick="() => GetRoomMeasurements(_times[_timesKey])"  @bind-Value="_timesKey" Data="@(_times.Keys)">
                    </RadzenSelectBar>
                </RadzenStack>
                <RadzenChart>
                    <RadzenChartTooltipOptions Shared="@_sharedTooltip"/>
                    <RadzenLineSeries Smooth="@_smooth" Data="@_roomMeasurement" CategoryProperty="Timestamp" Title="@RoomName" LineType="LineType.Solid" ValueProperty="Value">
                        <RadzenMarkers Visible="@_showMarkers" MarkerType="MarkerType.None"/>
                        <RadzenSeriesDataLabels Visible="@_showDataLabels"/>
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" Formatter='FormatAsCategory'/>
                    <RadzenValueAxis Formatter="FormatAsValue"  >
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="@Enum.GetName(_measurementType)"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenStack>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="Controls" Icon="open_with">
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
                <RadzenLabel>Window angle: @(_windowAngle)%</RadzenLabel>
                <RadzenSlider @bind-Value="_windowAngle" TValue="int" Min="0" Max="100" Style="min-width: 100%" Name="@_windowAngle.ToString()" />
                <RadzenButton Click="SubmitWindowAngle">Adjust</RadzenButton>
            </RadzenStack>
        </RadzenAccordionItem>
    </Items>
</RadzenAccordion>

@code {
    [Inject] IApiService ApiService { get; set; } = null!;
    [Inject] DialogService Service { get; set; } = null!;
    [Parameter] public string RoomName { get; set; } = null!;
    private MeasurementType _measurementType = MeasurementType.Temperature;
    private string _timesKey = "Hour";
    private readonly Dictionary<string, DateTime> _times = new()
    {
        ["Hour"] = DateTime.Now.AddHours(-1),
        ["Day"]=DateTime.Today,
        ["Week"]=DateTime.Today.AddDays(-((int)DateTime.Now.DayOfWeek + 1))
    };

    readonly bool _smooth = true;
    readonly bool _sharedTooltip = true;
    readonly bool _showDataLabels = false;
    readonly bool _showMarkers = true;
    List<ClimateMeasurement> _roomMeasurement = [];

    int _windowAngle;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await GetRoomMeasurements(DateTime.Now.AddHours(-1));

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    string FormatAsValue(object value)
    {
        return $"{value:F1}{DenominationDictionary.Denominations[_measurementType]}";
    }

    string FormatAsCategory(object category)
    {
        return _timesKey switch
        {
            "Hour" => $"{category:mm}",
            "Day" => $"{category:hh:mm}",
            "Week" => $"{category:dddd}",
            _ => throw new ArgumentOutOfRangeException()
        };
    }
    
    private async Task GetRoomMeasurements(DateTime? from)
    {
        _roomMeasurement = await ApiService.GetMeasurements(RoomName,from,_measurementType);
        _roomMeasurement = _roomMeasurement.Select(x => new ClimateMeasurement()
        {
            Timestamp = new DateTime(x.Timestamp.Year, x.Timestamp.Month, x.Timestamp.Day, x.Timestamp.Hour, x.Timestamp.Minute, 0),
            MeasurementType = x.MeasurementType,
            Value = x.Value,
            Device = x.Device,
            Location = x.Location
        }).GroupBy(x => x.Timestamp, measurement => measurement, (time, measurements) => new ClimateMeasurement() {Timestamp = time, Value = measurements.Average(x => x.Value)}).ToList();
        
        StateHasChanged();
    }

    private async Task SubmitWindowAngle()
    {
        await ApiService.PostWindowAngle(_windowAngle);
    }
}